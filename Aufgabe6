#-*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d

def klassischesrungekutta(f, x_old, function_parameters, h):
	'''
	klassisches Runge-Kutta-Verfahren mit:
	f 		              	beliebige Funktion
	x_old		            	x-Wert des letzten Schritts
	function_parameters	  Liste der Parameter der Funktion
	h			                Schrittweite
	k1			              zu Beginn des Intervalls
	k2, k3	           		in der Mitte des Intervalls
	k4		               	am Ende des Intervalls
	'''
	k1 = f(x_old, *function_parameters)
	k2 = f(x_old + (h/2)*k1, *function_parameters)
	k3 = f(x_old + (h/2)*k2, *function_parameters)
	k4 = f(x_old + h*k3, *function_parameters)
	return x_old + h/6*(k1 + 2*k2 + 2*k3 + k4)

def saltzmann(x_old, p, q, r):
	'''
	Rechte-Hand-Seite der Differentialgleichung dx/dt = -x - y und dy/dt = p*z + r*y - (z**2)*y und dz/dt = q*x - q*z
	p, q, r       Parameter
	x_old		      x-Wert des letzten Schrittes
	'''
	x = x_old[0]
	y = x_old[1]
	z = x_old[2]
	dxdt = -x - y
	dydt = p*z + r*y - (z**2)*y
	dzdt = q*x - q*z
	return np.array([dxdt, dydt, dzdt])

p = 0.01
q = 1.5
r = 1.5

x_0 = - (r - p)**0.5 + 0.0001	  #Anfangswert x(0)
y_0 = (r - p)**0.5		          #Anfangswert y(0)
z_0 = - (r - p)**0.5      		  #Anfangswert z(0)
u = np.array([x_0, y_0, z_0])

h = 0.025
t = np.arange(0., 500, h) #Array mit Zeitpunkten tj im Abstand h

u_klassischesrungekutta = [u]	#Lösungsliste mit einem Element, u
for tj in t[1:]:
	u_klassischesrungekutta += [klassischesrungekutta(saltzmann, u_klassischesrungekutta[-1], [r, p, q], h)] #nächster Schritt des klassischen Runge-Kutta-Verfahrens an Liste angehängt

u_klassischesrungekutta = np.array(u_klassischesrungekutta) #Liste zur Array gemacht
plt.plot(t, u_klassischesrungekutta[:, 0], label = 'klassisches Runge-Kutta-Verfahren, Zeitreihe für x')
plt.xlabel('t')
plt.ylabel('x')
plt.show()

plt.plot(t, u_klassischesrungekutta[:, 0], label = 'klassisches Runge-Kutta-Verfahren, Zeitreihe für y')
plt.xlabel('t')
plt.ylabel('y')
plt.show()

plt.plot(t, u_klassischesrungekutta[:, 0], label = 'klassisches Runge-Kutta-Verfahren, Zeitreihe für z')
plt.xlabel('t')
plt.ylabel('z')
plt.show()

plt.axes(projection='3d')
plt.plot(u_klassischesrungekutta[:, 0], u_klassischesrungekutta[:, 1], label = 'klassisches Runge-Kutta-Verfahren, Phasenraumtrajektorie')
plt.xlabel('x')
plt.ylabel('y')
#zaxis_title = 'z'
#plt.zlabel('z')
plt.show()
